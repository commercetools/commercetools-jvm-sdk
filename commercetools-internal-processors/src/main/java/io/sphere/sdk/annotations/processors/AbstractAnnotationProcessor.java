package io.sphere.sdk.annotations.processors;


import com.squareup.javapoet.JavaFile;

import javax.annotation.processing.AbstractProcessor;
import javax.lang.model.element.TypeElement;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;
import java.io.IOException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.util.Map;

public abstract class AbstractAnnotationProcessor<A extends Annotation> extends AbstractProcessor{
        protected final Class<A> clazz;

    protected AbstractAnnotationProcessor(final Class<A> clazz) {
        this.clazz = clazz;
    }



    protected final Class<? extends Annotation> getAnnotationClass() {
        return clazz;
    }



    protected final void writeClass(final TypeElement typeElement, final String fullyQualifiedName, final String template, final Map<String, Object> values) {
        values.put("codeGeneratedInfo", generateCodeGeneratedInfoForHandlebarsTemplate(typeElement, template));
        writeClass(typeElement, fullyQualifiedName, writer -> Templates.write(template, values, writer));
    }

    protected final void writeClass(final TypeElement typeElement, final ClassModel classModel) {
        classModel.setCodeGeneratedInfo(generateCodeGeneratedInfo(typeElement));
        writeClass(typeElement, classModel.getFullyQualifiedName(), writer -> Templates.writeClass(classModel, writer));
    }

    protected final void writeClass(final JavaFile javaFile) {
        try {
            javaFile.writeTo(processingEnv.getFiler());
        } catch (IOException e) {
            this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());
        }
    }

    protected final void writeClass(final TypeElement typeElement, final String fullyQualifiedName, final ClassLevelAnnotationProcessor.CheckedConsumer<Writer> writerCheckedConsumer) {
        try {
            JavaFileObject fileObject = this.processingEnv.getFiler().createSourceFile(fullyQualifiedName, typeElement);
            Writer writer = fileObject.openWriter();
            Throwable t = null;
            try {
                writerCheckedConsumer.accept(writer);
            } catch (Throwable throwable) {
                t = throwable;
                throw throwable;
            } finally {
                if(writer != null) {
                    if(t != null) {
                        try {
                            writer.close();
                        } catch (Throwable var24) {
                            t.addSuppressed(var24);
                        }
                    } else {
                        writer.close();
                    }
                }
            }
        } catch (Throwable e) {
            this.processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.getMessage());
        }
    }

    protected String generateCodeGeneratedInfo(final TypeElement typeElement, final String additionalLines) {
        return "/*\n"
                + "This class has been generated by " + this.getClass() + "\n"
                + "induced by the annotation " + clazz.getCanonicalName() + ".\n"
                + "in the source class " + typeElement.getQualifiedName() + ".\n"
                + additionalLines
                + "\n*/";
    }

    protected String generateCodeGeneratedInfo(final TypeElement typeElement) {
        return generateCodeGeneratedInfo(typeElement, "");
    }

    protected Object generateCodeGeneratedInfoForHandlebarsTemplate(final TypeElement typeElement, final String template) {
        return generateCodeGeneratedInfo(typeElement, "To render this class the handlebars template '" + template + ".hbs' has been used.");
    }

    public interface CheckedConsumer<T> {
        void accept(T t) throws Throwable;
    }

    protected final String getResourceName(final TypeElement typeElement) {
        return typeElement.getSimpleName().toString();
    }
}

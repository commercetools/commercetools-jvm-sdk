package io.sphere.sdk.annotations.processors.generators.examples;

import io.sphere.sdk.models.Base;
import io.sphere.sdk.models.Builder;
import java.lang.String;
import javax.annotation.Generated;

/**
 * Builder for {@link ExampleWithSuperInterfaceDraft}.
 */
@Generated(
    value = "io.sphere.sdk.annotations.processors.generators.DraftBuilderGenerator",
    comments = "Generated from: io.sphere.sdk.annotations.processors.generators.examples.ExampleWithSuperInterfaceDraft"
)
public final class ExampleWithSuperInterfaceDraftBuilder extends Base implements Builder<ExampleWithSuperInterfaceDraft> {
  private String name;

  private String sku;

  ExampleWithSuperInterfaceDraftBuilder() {
  }

  ExampleWithSuperInterfaceDraftBuilder(final String name, final String sku) {
    this.name = name;
    this.sku = sku;
  }

  public ExampleWithSuperInterfaceDraftBuilder name(final String name) {
    this.name = name;
    return this;
  }

  public ExampleWithSuperInterfaceDraftBuilder sku(final String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Builds the instance.
   *
   * @return the instance
   */
  public ExampleWithSuperInterfaceDraftDsl build() {
    return new ExampleWithSuperInterfaceDraftDsl(name, sku);
  }

  public static ExampleWithSuperInterfaceDraftBuilder of(final String name, final String sku) {
    return new ExampleWithSuperInterfaceDraftBuilder(name, sku);
  }

  /**
   * Creates a builder initialized with the fields of the template parameter.
   *
   * @param template the template
   * @return a new builder initialized from the template
   */
  public static ExampleWithSuperInterfaceDraftBuilder of(final ExampleWithSuperInterfaceDraft template) {
    return new ExampleWithSuperInterfaceDraftBuilder(template.getName(), template.getSku());
  }
}
